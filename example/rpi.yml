steps:
- mkimg: '{{ output }}'
  size: 4G
- mklabel: msdos
  device: '{{ output }}'
- mkpart: primary
  fs-type: fat32
  device: '{{ output }}'
  start: 4MiB
  end: 20%
  tag: /boot
- mkpart: primary
  device: '{{ output }}'
  start: 20%
  end: 100%
  tag: /
- kpartx: '{{ output }}'
- mkfs: vfat
  partition: /boot
  label: RASPIFIRM
- mkfs: ext4
  partition: /
  label: RASPIROOT
- mount: /
- mount: /boot
  mount-on: /
  dirname: /boot/firmware
- unpack-rootfs: /
- debootstrap: bullseye
  arch: arm64
  components:
  - main
  - contrib
  - non-free
  mirror: http://deb.debian.org/debian
  target: /
  unless: rootfs_unpacked
- create-file: /etc/apt/sources.list
  trailing-newline: '1'
  contents: 'deb http://deb.debian.org/debian bullseye main contrib non-free

    deb http://security.debian.org/debian-security bullseye-security main contrib
    non-free

    # Backports are _not_ enabled by default.

    # Enable them by uncommenting the following line:

    # deb http://deb.debian.org/debian bullseye-backports main contrib non-free

    '
  unless: rootfs_unpacked
- chroot: /
  shell: apt-get update
  unless: rootfs_unpacked
- copy-file: /etc/initramfs-tools/hooks/rpi-resizerootfs
  src: rootfs/etc/initramfs-tools/hooks/rpi-resizerootfs
  perm: 493
  unless: rootfs_unpacked
- copy-file: /etc/initramfs-tools/scripts/local-bottom/rpi-resizerootfs
  src: rootfs/etc/initramfs-tools/scripts/local-bottom/rpi-resizerootfs
  perm: 493
  unless: rootfs_unpacked
- apt: install
  packages:
  - wpasupplicant
  - raspi-firmware
  - linux-image-arm64
  - firmware-brcm80211
  tag: /
  unless: rootfs_unpacked
- cache-rootfs: /
  unless: rootfs_unpacked
- shell: 'install -m 644 -o root -g root rootfs/etc/fstab "${ROOT?}/etc/fstab"


    install -m 644 -o root -g root rootfs/etc/network/interfaces.d/eth0 "${ROOT?}/etc/network/interfaces.d/eth0"

    install -m 600 -o root -g root rootfs/etc/network/interfaces.d/wlan0 "${ROOT?}/etc/network/interfaces.d/wlan0"


    install -m 755 -o root -g root rootfs/usr/local/sbin/rpi-set-sysconf "${ROOT?}/usr/local/sbin/rpi-set-sysconf"

    install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-set-sysconf.service
    "${ROOT?}/etc/systemd/system/"

    install -m 644 -o root -g root rootfs/boot/firmware/sysconf.txt "${ROOT?}/boot/firmware/sysconf.txt"

    mkdir -p "${ROOT?}/etc/systemd/system/basic.target.requires/"

    ln -s /etc/systemd/system/rpi-set-sysconf.service "${ROOT?}/etc/systemd/system/basic.target.requires/rpi-set-sysconf.service"


    # Resize script is now in the initrd for first boot; no need to ship it.

    rm -f "${ROOT?}/etc/initramfs-tools/hooks/rpi-resizerootfs"

    rm -f "${ROOT?}/etc/initramfs-tools/scripts/local-bottom/rpi-resizerootfs"


    install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-reconfigure-raspi-firmware.service
    "${ROOT?}/etc/systemd/system/"

    mkdir -p "${ROOT?}/etc/systemd/system/multi-user.target.requires/"

    ln -s /etc/systemd/system/rpi-reconfigure-raspi-firmware.service "${ROOT?}/etc/systemd/system/multi-user.target.requires/rpi-reconfigure-raspi-firmware.service"


    install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-generate-ssh-host-keys.service
    "${ROOT?}/etc/systemd/system/"

    ln -s /etc/systemd/system/rpi-generate-ssh-host-keys.service "${ROOT?}/etc/systemd/system/multi-user.target.requires/rpi-generate-ssh-host-keys.service"

    rm -f "${ROOT?}"/etc/ssh/ssh_host_*_key*

    '
  root-fs: /
  unless: rootfs_unpacked
- chroot: /
  shell: 'install -m 644 -o root -g root /usr/lib/linux-image-*-arm64/broadcom/bcm*rpi*.dtb
    /boot/firmware/

    '
  unless: rootfs_unpacked
- chroot: /
  shell: 'sed -i ''s/^/console=ttyS1,115200 /'' /boot/firmware/cmdline.txt

    sed -i ''s/cma=64M //'' /boot/firmware/cmdline.txt

    sed -i ''s/cma=$CMA //'' /etc/kernel/postinst.d/z50-raspi-firmware

    sed -i ''s/.dev.mmcblk0p2/LABEL=RASPIROOT/'' /boot/firmware/cmdline.txt

    sed -i ''s/cma=64M //'' /boot/firmware/cmdline.txt

    sed -i ''s/cma=$CMA //'' /etc/kernel/postinst.d/z50-raspi-firmware

    '
  unless: rootfs_unpacked
- chroot: /
  shell: touch '/generated-using-vmdb2'
  unless: rootfs_unpacked
- copy-file: /bootstrap.sh
  src: /home/pi/vmdb-config/example/bootstrap.sh
  unless: rootfs_unpacked
- chroot: /
  shell: /bootstrap.sh
  unless: rootfs_unpacked
- chroot: /
  shell: 'apt-get clean

    rm -rf /var/lib/apt/lists

    '
- shell: rm "${ROOT?}/etc/resolv.conf"
  root-fs: /
- chroot: /
  shell: rm -f /etc/machine-id /var/lib/dbus/machine-id
